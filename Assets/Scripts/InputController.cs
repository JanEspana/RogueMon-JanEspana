//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3d7923ff-aa9f-46e9-b1de-f51addce02c6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""28c0646c-6e8d-42f7-9b53-39ea945646ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e8ed2281-5ac8-4ad4-b231-0e69f1c42727"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""14b0fa8d-80e2-4eb0-b4e2-68201db57738"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a1e43c1d-d861-4a46-a08f-5c2b732dc927"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2ab81e8-a23a-4ea0-a678-1e759f3af57a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d83651f-8a21-4abb-b713-9070f05ab927"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Weapon"",
            ""id"": ""2ba559ae-4ace-4c4e-85ff-45cf2588790f"",
            ""actions"": [
                {
                    ""name"": ""Clobbopus"",
                    ""type"": ""Button"",
                    ""id"": ""544e9bcd-c092-4d34-bf90-fa30a4c7f6f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clauncher"",
                    ""type"": ""Button"",
                    ""id"": ""8076fa3c-2116-4f2a-93ec-34770cacf6d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Magby"",
                    ""type"": ""Button"",
                    ""id"": ""fc80d99b-aaee-4f82-a8c6-b6d1a56ba14e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PinecoLauncher"",
                    ""type"": ""Button"",
                    ""id"": ""b2b31c8b-100f-400f-bb4d-8bd3079877ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""824b9ec9-9294-4d68-bb0b-b2b3631187c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd83c3bb-52b4-4ae3-93a0-723bb48fd4cf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clobbopus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""967eee28-457d-409d-bcde-2c66e902b0cc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clauncher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ce4286a-b264-43ee-ab60-5bcd9cdc857e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Magby"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b4bcf98-6fcd-4d45-a81a-28af90e918d2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PinecoLauncher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c356480e-7dd8-42eb-a75d-34c9d7f8551e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_Clobbopus = m_Weapon.FindAction("Clobbopus", throwIfNotFound: true);
        m_Weapon_Clauncher = m_Weapon.FindAction("Clauncher", throwIfNotFound: true);
        m_Weapon_Magby = m_Weapon.FindAction("Magby", throwIfNotFound: true);
        m_Weapon_PinecoLauncher = m_Weapon.FindAction("PinecoLauncher", throwIfNotFound: true);
        m_Weapon_UseWeapon = m_Weapon.FindAction("UseWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    public struct PlayerActions
    {
        private @InputController m_Wrapper;
        public PlayerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Weapon
    private readonly InputActionMap m_Weapon;
    private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
    private readonly InputAction m_Weapon_Clobbopus;
    private readonly InputAction m_Weapon_Clauncher;
    private readonly InputAction m_Weapon_Magby;
    private readonly InputAction m_Weapon_PinecoLauncher;
    private readonly InputAction m_Weapon_UseWeapon;
    public struct WeaponActions
    {
        private @InputController m_Wrapper;
        public WeaponActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Clobbopus => m_Wrapper.m_Weapon_Clobbopus;
        public InputAction @Clauncher => m_Wrapper.m_Weapon_Clauncher;
        public InputAction @Magby => m_Wrapper.m_Weapon_Magby;
        public InputAction @PinecoLauncher => m_Wrapper.m_Weapon_PinecoLauncher;
        public InputAction @UseWeapon => m_Wrapper.m_Weapon_UseWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
            @Clobbopus.started += instance.OnClobbopus;
            @Clobbopus.performed += instance.OnClobbopus;
            @Clobbopus.canceled += instance.OnClobbopus;
            @Clauncher.started += instance.OnClauncher;
            @Clauncher.performed += instance.OnClauncher;
            @Clauncher.canceled += instance.OnClauncher;
            @Magby.started += instance.OnMagby;
            @Magby.performed += instance.OnMagby;
            @Magby.canceled += instance.OnMagby;
            @PinecoLauncher.started += instance.OnPinecoLauncher;
            @PinecoLauncher.performed += instance.OnPinecoLauncher;
            @PinecoLauncher.canceled += instance.OnPinecoLauncher;
            @UseWeapon.started += instance.OnUseWeapon;
            @UseWeapon.performed += instance.OnUseWeapon;
            @UseWeapon.canceled += instance.OnUseWeapon;
        }

        private void UnregisterCallbacks(IWeaponActions instance)
        {
            @Clobbopus.started -= instance.OnClobbopus;
            @Clobbopus.performed -= instance.OnClobbopus;
            @Clobbopus.canceled -= instance.OnClobbopus;
            @Clauncher.started -= instance.OnClauncher;
            @Clauncher.performed -= instance.OnClauncher;
            @Clauncher.canceled -= instance.OnClauncher;
            @Magby.started -= instance.OnMagby;
            @Magby.performed -= instance.OnMagby;
            @Magby.canceled -= instance.OnMagby;
            @PinecoLauncher.started -= instance.OnPinecoLauncher;
            @PinecoLauncher.performed -= instance.OnPinecoLauncher;
            @PinecoLauncher.canceled -= instance.OnPinecoLauncher;
            @UseWeapon.started -= instance.OnUseWeapon;
            @UseWeapon.performed -= instance.OnUseWeapon;
            @UseWeapon.canceled -= instance.OnUseWeapon;
        }

        public void RemoveCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActions @Weapon => new WeaponActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IWeaponActions
    {
        void OnClobbopus(InputAction.CallbackContext context);
        void OnClauncher(InputAction.CallbackContext context);
        void OnMagby(InputAction.CallbackContext context);
        void OnPinecoLauncher(InputAction.CallbackContext context);
        void OnUseWeapon(InputAction.CallbackContext context);
    }
}
